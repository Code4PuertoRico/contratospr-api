#! /bin/bash

echo "Thanks for your interest in ContratosPR and its API ‚ù§Ô∏è"
echo "This script is meant to help you with the setup process for this project that is outlined " \
    "here https://github.com/TheIndexingProject/contratospr-api/blob/master/CONTRIBUTING.md#project-setup. üëÄ"
echo "If this doesn't help or is even more confussing for you please let use know " \
    "by creating a new issue here https://github.com/TheIndexingProject/contratospr-api/issues/new/choose"

if ! [ -x "$(command -v docker)" ] ; then
    echo "üõë We could not detect if you have Docker installed. " \
        "We recommend you install both Docker for your system. üõë"
    echo "For information on how to do that please take a look at https://docs.docker.com/install/"

    exit 1
else
    echo "Found Docker üê≥"
fi

if ! [ -x "$(command -v docker-compose)" ] ; then
    echo "üõë We could not detect if you have Docker Compose installed. " \
        "We recommend you install Docker Compose for your system. üõë"
    echo "For information on how to do that please take a look at https://docs.docker.com/compose/install/"

    exit 1
else
    echo "Found Docker Compose ‚úÖ"
fi

if ! [ -x "$(command -v python3.7)" ] || ! [ -x "$(command -v python3)" ]; then
    if ! [ -x "$(command -v python)" ]; then
        echo "üõë We could not detect that you have Python installed. Please install Python 3.7.x. üõë"
        exit 1
    else
        python_version=`python -c 'import sys; version=sys.version_info[:3]; print("{0}.{1}".format(*version))'`

        if [ $python_version != "3.7" ] ; then 
            echo "Please install Python version 3.7.2 or greater"
            exit 1
        fi
    fi
fi

echo "Found Python 3.7 üêç"

if ! [ -x "$(command -v pipenv)" ]; then

    read -p "You do not have pipenv installed. The default installation method will be Pip. Would you like to install it with [P]ip or [H]omebrew? " choice

    if [ $choice == "h" ] || [ $choice == "H" ] ; then
        if ! [ -x "$(command -v brew)" ] ; then
            echo "üõë We could not find Homebrew installed in your system. " \
                "Please take a look on how to install it here: https://brew.sh/ üõë"
            exit 1
        fi

        echo "Found Homebre üç∫. Installing Pipenv."
        brew install pipenv
    else
        echo "Installing using Pip"

        if [ -x "$(command -v pip3.7)" ]; then
            pip3.7 install pipenv
        elif [ -x "$(command -v pip3)" ]; then
            pip3 install pipenv
        else
            echo "üõë We could not find pip installed in your system. üõë"
            exit 1
        fi
    fi
fi

pipenv install --dev

pipenv run pre-commit install

echo "Creating the .env file. Remember to change this file with your settings."
if [ -f example.env ]; then
    cp example.env .env
else
    echo "PYTHONUNBUFFERED=1" >> .env
    echo "" >> .env
    echo "DJANGO_SECRET_KEY=dont-tell-eve" >> .env
    echo "DATABASE_URL=postgres://postgres:password@database/postgres" >> .env
    echo "REDIS_URL=redis://redis:6379" >> .env
    echo "FILEPREVIEWS_API_KEY=""" >> .env
    echo "FILEPREVIEWS_API_SECRET=""" >> .env
fi

database_backup_dump="`dirname "$0"`/docker/postgres/backup.dump"

if ! [ -f $database_backup_dump ] ; then
    echo "We need to download our development database dump. This file is about 100MB. üò±"
    read -p "Would you still want to download this? [Y/n] " choice

    if [ $choice == "Y" ] || [ $choice == "y" ] ; then
        curl -o $database_backup_dump https://s3.amazonaws.com/data.contratospr.com/2019-08-24/backup.dump
    else
        echo "The file will not be downloaded. If you change your mind you can download it here: " \
            "https://s3.amazonaws.com/data.contratospr.com/2019-08-24/backup.dump"
        echo "‚ö†Ô∏è Remember that if you run this project without this you will not have any test data. ‚ö†Ô∏è"
    fi
fi

echo "You're all set! When ever you're ready to run this project using Docker and docker-compose."
read -p "Would you like to run these commands now? [Y/n] " choice

if [ $choice == "Y" ] || [ $choice == "y" ] ; then
    echo "Building Docker images. üê≥üê≥üê≥"

    read -p "Do you want to run this in detached mode (will not show logs)? [Y/n]" choice

    if [ $choice == "Y" ] || [ $choice == "y" ] ; then
        docker-compose up --build -d
    else
        docker-compose up --build
    fi

    status=0
    until [ $status -eq "200" ]
    do
        status=$(curl -o /dev/null -s -w "%{http_code}\n" http://localhost:8000/health/liveness/)
        echo "contratospr-api WEB service status: $status. Waiting for service to be available."
        sleep 3
    done

    echo "Service available! üéâ"
    echo "We also need to create a superuser account. You can do this yourself or we can do this now."
    read -p "Do you want to create the superuser account now? [Y/n] " choice

    if [ $choice == "Y" ] || [ $choice == "y" ] ; then
        docker-compose exec web python manage.py createsuperuser
    else
        echo "‚ÑπÔ∏è Remember that without this super user you will not be able to access the Django Admin. ‚ÑπÔ∏è"
        echo "‚ÑπÔ∏è To create this account you can run docker-compose exec web python manage.py createsuperuser ‚ÑπÔ∏è"
    fi

    echo "You can now visit http://localhost:8000 in the browser of your choice."
fi

echo "All done! ü¶Ñ"